// Code generated by table-def-gen. DO NOT EDIT.

package pgres

import (
	"github.com/sergiobonfiglio/tomasql"	
)

type AccountTableDef struct {
	*tomasql.SqlableTable
	alias     *string
	CreatedTs *PGCol[int]
	Id        *PGCol[int64]
	Type      *PGCol[string]
	Uuid      *PGCol[string]
}

var _ tomasql.Table = &AccountTableDef{}

func newAccountTable() *AccountTableDef {
	tDef := &AccountTableDef{}
	tDef.CreatedTs = Wrap(tomasql.NewCol[int]("created_ts", tDef))
	tDef.Id = Wrap(tomasql.NewCol[int64]("id", tDef))
	tDef.Type = Wrap(tomasql.NewCol[string]("type", tDef))
	tDef.Uuid = Wrap(tomasql.NewCol[string]("uuid", tDef))
	tDef.SqlableTable = tomasql.NewSqlableTable(tDef)
	return tDef
}

var Account = newAccountTable()

func (a *AccountTableDef) TableName() string {
	return "account"
}

func (a *AccountTableDef) Alias() *string {
	return a.alias
}

func (a *AccountTableDef) As(x string) *AccountTableDef {
	newT := newAccountTable()
	newT.alias = &x
	return newT
}

func (a *AccountTableDef) Star() tomasql.ParametricSql {
	return tomasql.NewCol[string]("*", a)
}

type ConfigTableDef struct {
	*tomasql.SqlableTable
	alias      *string
	AccountId  *PGCol[int64]
	ArchivedTs *PGCol[int]
	CreatedTs  *PGCol[int]
	Id         *PGCol[int64]
	Uuid       *PGCol[string]
}

var _ tomasql.Table = &ConfigTableDef{}

func newConfigTable() *ConfigTableDef {
	tDef := &ConfigTableDef{}
	tDef.AccountId = Wrap(tomasql.NewCol[int64]("account_id", tDef))
	tDef.ArchivedTs = Wrap(tomasql.NewCol[int]("archived_ts", tDef))
	tDef.CreatedTs = Wrap(tomasql.NewCol[int]("created_ts", tDef))
	tDef.Id = Wrap(tomasql.NewCol[int64]("id", tDef))
	tDef.Uuid = Wrap(tomasql.NewCol[string]("uuid", tDef))
	tDef.SqlableTable = tomasql.NewSqlableTable(tDef)
	return tDef
}

var Config = newConfigTable()

func (a *ConfigTableDef) TableName() string {
	return "config"
}

func (a *ConfigTableDef) Alias() *string {
	return a.alias
}

func (a *ConfigTableDef) As(x string) *ConfigTableDef {
	newT := newConfigTable()
	newT.alias = &x
	return newT
}

func (a *ConfigTableDef) Star() tomasql.ParametricSql {
	return tomasql.NewCol[string]("*", a)
}

type ShoppingCartTableDef struct {
	*tomasql.SqlableTable
	alias      *string
	ArchivedTs *PGCol[int]
	CreatedTs  *PGCol[int]
	Id         *PGCol[int64]
	OwnerId    *PGCol[int64]
	Uuid       *PGCol[string]
}

var _ tomasql.Table = &ShoppingCartTableDef{}

func newShoppingCartTable() *ShoppingCartTableDef {
	tDef := &ShoppingCartTableDef{}
	tDef.ArchivedTs = Wrap(tomasql.NewCol[int]("archived_ts", tDef))
	tDef.CreatedTs = Wrap(tomasql.NewCol[int]("created_ts", tDef))
	tDef.Id = Wrap(tomasql.NewCol[int64]("id", tDef))
	tDef.OwnerId = Wrap(tomasql.NewCol[int64]("owner_id", tDef))
	tDef.Uuid = Wrap(tomasql.NewCol[string]("uuid", tDef))
	tDef.SqlableTable = tomasql.NewSqlableTable(tDef)
	return tDef
}

var ShoppingCart = newShoppingCartTable()

func (a *ShoppingCartTableDef) TableName() string {
	return "shopping_cart"
}

func (a *ShoppingCartTableDef) Alias() *string {
	return a.alias
}

func (a *ShoppingCartTableDef) As(x string) *ShoppingCartTableDef {
	newT := newShoppingCartTable()
	newT.alias = &x
	return newT
}

func (a *ShoppingCartTableDef) Star() tomasql.ParametricSql {
	return tomasql.NewCol[string]("*", a)
}
