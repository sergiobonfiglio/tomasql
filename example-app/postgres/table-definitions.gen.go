// Code generated by table-def-gen. DO NOT EDIT.

package postgres

import (
	"github.com/sergiobonfiglio/tomasql"
	"github.com/sergiobonfiglio/tomasql/extensions/pgres"
	"time"
)

type CategoriesTableDef struct {
	*tomasql.SqlableTable
	alias       *string
	CreatedAt   *pgres.PGCol[time.Time]
	Description *pgres.PGCol[string]
	Id          *pgres.PGCol[int]
	Name        *pgres.PGCol[string]
	ParentId    *pgres.PGCol[int]
}

var _ tomasql.Table = &CategoriesTableDef{}

func newCategoriesTable() *CategoriesTableDef {
	tDef := &CategoriesTableDef{}
	tDef.CreatedAt = pgres.Wrap(tomasql.NewCol[time.Time]("created_at", tDef))
	tDef.Description = pgres.Wrap(tomasql.NewCol[string]("description", tDef))
	tDef.Id = pgres.Wrap(tomasql.NewCol[int]("id", tDef))
	tDef.Name = pgres.Wrap(tomasql.NewCol[string]("name", tDef))
	tDef.ParentId = pgres.Wrap(tomasql.NewCol[int]("parent_id", tDef))
	tDef.SqlableTable = tomasql.NewSqlableTable(tDef)
	return tDef
}

var Categories = newCategoriesTable()

func (a *CategoriesTableDef) TableName() string {
	return "categories"
}

func (a *CategoriesTableDef) Alias() *string {
	return a.alias
}

func (a *CategoriesTableDef) As(x string) *CategoriesTableDef {
	newT := newCategoriesTable()
	newT.alias = &x
	return newT
}

func (a *CategoriesTableDef) Star() tomasql.ParametricSql {
	return tomasql.NewCol[string]("*", a)
}

type OrderItemsTableDef struct {
	*tomasql.SqlableTable
	alias     *string
	Id        *pgres.PGCol[int]
	OrderId   *pgres.PGCol[int]
	Price     *pgres.PGCol[float64]
	ProductId *pgres.PGCol[int]
	Quantity  *pgres.PGCol[int]
}

var _ tomasql.Table = &OrderItemsTableDef{}

func newOrderItemsTable() *OrderItemsTableDef {
	tDef := &OrderItemsTableDef{}
	tDef.Id = pgres.Wrap(tomasql.NewCol[int]("id", tDef))
	tDef.OrderId = pgres.Wrap(tomasql.NewCol[int]("order_id", tDef))
	tDef.Price = pgres.Wrap(tomasql.NewCol[float64]("price", tDef))
	tDef.ProductId = pgres.Wrap(tomasql.NewCol[int]("product_id", tDef))
	tDef.Quantity = pgres.Wrap(tomasql.NewCol[int]("quantity", tDef))
	tDef.SqlableTable = tomasql.NewSqlableTable(tDef)
	return tDef
}

var OrderItems = newOrderItemsTable()

func (a *OrderItemsTableDef) TableName() string {
	return "order_items"
}

func (a *OrderItemsTableDef) Alias() *string {
	return a.alias
}

func (a *OrderItemsTableDef) As(x string) *OrderItemsTableDef {
	newT := newOrderItemsTable()
	newT.alias = &x
	return newT
}

func (a *OrderItemsTableDef) Star() tomasql.ParametricSql {
	return tomasql.NewCol[string]("*", a)
}

type OrdersTableDef struct {
	*tomasql.SqlableTable
	alias       *string
	CreatedAt   *pgres.PGCol[time.Time]
	Id          *pgres.PGCol[int]
	Status      *pgres.PGCol[string]
	TotalAmount *pgres.PGCol[float64]
	UpdatedAt   *pgres.PGCol[time.Time]
	UserId      *pgres.PGCol[int]
}

var _ tomasql.Table = &OrdersTableDef{}

func newOrdersTable() *OrdersTableDef {
	tDef := &OrdersTableDef{}
	tDef.CreatedAt = pgres.Wrap(tomasql.NewCol[time.Time]("created_at", tDef))
	tDef.Id = pgres.Wrap(tomasql.NewCol[int]("id", tDef))
	tDef.Status = pgres.Wrap(tomasql.NewCol[string]("status", tDef))
	tDef.TotalAmount = pgres.Wrap(tomasql.NewCol[float64]("total_amount", tDef))
	tDef.UpdatedAt = pgres.Wrap(tomasql.NewCol[time.Time]("updated_at", tDef))
	tDef.UserId = pgres.Wrap(tomasql.NewCol[int]("user_id", tDef))
	tDef.SqlableTable = tomasql.NewSqlableTable(tDef)
	return tDef
}

var Orders = newOrdersTable()

func (a *OrdersTableDef) TableName() string {
	return "orders"
}

func (a *OrdersTableDef) Alias() *string {
	return a.alias
}

func (a *OrdersTableDef) As(x string) *OrdersTableDef {
	newT := newOrdersTable()
	newT.alias = &x
	return newT
}

func (a *OrdersTableDef) Star() tomasql.ParametricSql {
	return tomasql.NewCol[string]("*", a)
}

type ProductsTableDef struct {
	*tomasql.SqlableTable
	alias         *string
	CategoryId    *pgres.PGCol[int]
	CreatedAt     *pgres.PGCol[time.Time]
	Description   *pgres.PGCol[string]
	Id            *pgres.PGCol[int]
	Name          *pgres.PGCol[string]
	Price         *pgres.PGCol[float64]
	StockQuantity *pgres.PGCol[int]
	UpdatedAt     *pgres.PGCol[time.Time]
}

var _ tomasql.Table = &ProductsTableDef{}

func newProductsTable() *ProductsTableDef {
	tDef := &ProductsTableDef{}
	tDef.CategoryId = pgres.Wrap(tomasql.NewCol[int]("category_id", tDef))
	tDef.CreatedAt = pgres.Wrap(tomasql.NewCol[time.Time]("created_at", tDef))
	tDef.Description = pgres.Wrap(tomasql.NewCol[string]("description", tDef))
	tDef.Id = pgres.Wrap(tomasql.NewCol[int]("id", tDef))
	tDef.Name = pgres.Wrap(tomasql.NewCol[string]("name", tDef))
	tDef.Price = pgres.Wrap(tomasql.NewCol[float64]("price", tDef))
	tDef.StockQuantity = pgres.Wrap(tomasql.NewCol[int]("stock_quantity", tDef))
	tDef.UpdatedAt = pgres.Wrap(tomasql.NewCol[time.Time]("updated_at", tDef))
	tDef.SqlableTable = tomasql.NewSqlableTable(tDef)
	return tDef
}

var Products = newProductsTable()

func (a *ProductsTableDef) TableName() string {
	return "products"
}

func (a *ProductsTableDef) Alias() *string {
	return a.alias
}

func (a *ProductsTableDef) As(x string) *ProductsTableDef {
	newT := newProductsTable()
	newT.alias = &x
	return newT
}

func (a *ProductsTableDef) Star() tomasql.ParametricSql {
	return tomasql.NewCol[string]("*", a)
}

type UsersTableDef struct {
	*tomasql.SqlableTable
	alias     *string
	CreatedAt *pgres.PGCol[time.Time]
	Email     *pgres.PGCol[string]
	Id        *pgres.PGCol[int]
	IsActive  *pgres.PGCol[bool]
	Name      *pgres.PGCol[string]
	UpdatedAt *pgres.PGCol[time.Time]
}

var _ tomasql.Table = &UsersTableDef{}

func newUsersTable() *UsersTableDef {
	tDef := &UsersTableDef{}
	tDef.CreatedAt = pgres.Wrap(tomasql.NewCol[time.Time]("created_at", tDef))
	tDef.Email = pgres.Wrap(tomasql.NewCol[string]("email", tDef))
	tDef.Id = pgres.Wrap(tomasql.NewCol[int]("id", tDef))
	tDef.IsActive = pgres.Wrap(tomasql.NewCol[bool]("is_active", tDef))
	tDef.Name = pgres.Wrap(tomasql.NewCol[string]("name", tDef))
	tDef.UpdatedAt = pgres.Wrap(tomasql.NewCol[time.Time]("updated_at", tDef))
	tDef.SqlableTable = tomasql.NewSqlableTable(tDef)
	return tDef
}

var Users = newUsersTable()

func (a *UsersTableDef) TableName() string {
	return "users"
}

func (a *UsersTableDef) Alias() *string {
	return a.alias
}

func (a *UsersTableDef) As(x string) *UsersTableDef {
	newT := newUsersTable()
	newT.alias = &x
	return newT
}

func (a *UsersTableDef) Star() tomasql.ParametricSql {
	return tomasql.NewCol[string]("*", a)
}
